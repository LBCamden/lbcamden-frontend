@function svg-url($svg) {
  //
  //  Add missing namespace
  //
  @if not str-index($svg,xmlns) {
    $svg: str-replace($svg, "<svg", "<svg xmlns=\"http://www.w3.org/2000/svg\"");
  }
  //
  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  //
  $encoded: "";
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) / $slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //
    //   Encode
    //
    $chunk: str-replace($chunk, "\"", "\"");
    $chunk: str-replace($chunk, "%", "%25");
    $chunk: str-replace($chunk, "#", "%23");
    $chunk: str-replace($chunk, "{", "%7B");
    $chunk: str-replace($chunk, "}", "%7D");
    $chunk: str-replace($chunk, "<", "%3C");
    $chunk: str-replace($chunk, ">", "%3E");

    //
    //    The maybe list
    //
    //    Keep size and compile time down
    //    ... only add on documented fail
    //
    //  $chunk: str-replace($chunk, "&", "%26");
    //  $chunk: str-replace($chunk, "|", "%7C");
    //  $chunk: str-replace($chunk, "[", "%5B");
    //  $chunk: str-replace($chunk, "]", "%5D");
    //  $chunk: str-replace($chunk, "^", "%5E");
    //  $chunk: str-replace($chunk, "`", "%60");
    //  $chunk: str-replace($chunk, ";", "%3B");
    //  $chunk: str-replace($chunk, "?", "%3F");
    //  $chunk: str-replace($chunk, ":", "%3A");
    //  $chunk: str-replace($chunk, "@", "%40");
    //  $chunk: str-replace($chunk, "=", "%3D");

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml,#{$encoded}");
}

//  Background svg mixin
@mixin background-svg($svg) {
  background-image: svg-url($svg);
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @return if($index,
  str-slice($string, 1, $index - 1) + $replace +
  str-replace(str-slice($string, $index +
  str-length($search)), $search, $replace),
  $string);
}

// Chevron helper
@mixin lbcamden-chevron($colour, $rotation: 45, $size: 2) {
  width: $size * 3 + px;
  height: $size * 3 + px;
  //clip-path: path("M7.48316 3.7425L7.07104 8.75608C7.0428 9.09874 6.74128 9.3771 6.39755 9.37785C6.05373 9.37867 5.79781 9.10147 5.82605 8.75882L6.1872 4.36549L1.77906 4.37521C1.43524 4.37604 1.17933 4.09884 1.20757 3.75619C1.23573 3.4136 1.53724 3.13524 1.88106 3.13442L6.91154 3.12333C7.25528 3.12257 7.51119 3.39977 7.48302 3.74235L7.48316 3.7425Z");
  //clip-path: path("M1,0.099 L0.934,0.901 C0.93,0.955,0.882,1,0.827,1 C0.772,1,0.731,0.956,0.736,0.901 L0.793,0.199 L0.091,0.2 C0.037,0.2,-0.004,0.156,0,0.101 C0.005,0.046,0.053,0.002,0.108,0.002 L0.909,0 C0.963,0,1,0.044,1,0.099 L1,0.099");
  object-fit: cover;
  clip-path: url("#chevron-clip-path");
  transform: rotate($rotation + deg);
  border-top: $size + px solid $colour;
  border-right: $size + px solid $colour;
}
